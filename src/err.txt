---fibonacci
Curr class declared as: fibonacci!
line = 1	:endclass 0
it = fib
fibonacci-fib.3ac
line: beginfunc fib n`2
x = fib
fibonacci-fib
the line is fibonacci,3
Name = fibonacci::fib::n`2as
Name = fibonacci::fib::x`2as
fill var returned
pos = 14
Declaring local vars******************************************
read csv 3
i = 1
i = 1
 t = int!
sz = -16
t=fibonacci::fib::n`2
dec
i = 2
i = 2
 t = int!
sz = -24
t=fibonacci::fib::x`2
dec
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1tmp size = 3
insert arg calleds
j=0
hey]h
ar info
fibonacci::fib::n`2 fibonacci::fib::x`2 
come
reavched th
looking for fibonacci::fib::this
looking for fibonacci::fib::n`2
insert ags ret
file opened!
cnt = 1
line: 2	:x`2=0
x`2=0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != x`2 x`2=0
getting address for x`2 as looking for fibonacci::fib::x`2
-16
looking for fibonacci::fib::x`2
identify called
movq	$0, -16(%rbp)
ret
size is 6
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
funccode size: 7
cnt = 2
line: 3	:if n`2<=1 goto 5
if n`2<=1 goto 5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
if found
n`2 var 1 1
n`2 in genMove
looking for fibonacci::fib::n`2
y = n`2
1 in genMove
jle .L5
identify called
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
ret
size is 7
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
funccode size: 12
cnt = 3
line: 4	:goto 7
goto 7
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
identify called
jmp .L7
ret
size is 12
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
funccode size: 13
cnt = 4
line: 5	:x`2=1
x`2=1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != x`2 x`2=1
getting address for x`2 as looking for fibonacci::fib::x`2
-16
looking for fibonacci::fib::x`2
identify called
.L5:
movq	$1, -16(%rbp)
ret
size is 13
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
funccode size: 15
cnt = 5
line: 6	:goto 15
goto 15
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
identify called
jmp .L15
ret
size is 15
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
jmp .L15
funccode size: 16
cnt = 6
line: 7	:_t0=n`2-1
_t0=n`2-1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != _t0 _t0=n`2-1
y, z = n`2, 1
n`2 in genMove
looking for fibonacci::fib::n`2
y = n`2
1 in genMove
%rcx in genMove
looking for fibonacci::fib::_t0
identify called
.L7:
movq	-8(%rbp), %rbx
movq	$1, %rcx
subq	%rbx, %rcx
movq	%rcx, -24(%rbp)
ret
size is 16
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
jmp .L15
.L7:
movq	-8(%rbp), %rbx
movq	$1, %rcx
subq	%rbx, %rcx
movq	%rcx, -24(%rbp)
funccode size: 21
cnt = 7
line: 8	:pushparam _t0
##################Line is : 9	:stackpointer=stackpointer+8
##################Line is : 10	:_t1=call fib
##################Line is : 10	:_t1=call fib
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2num of arguments = 1
************************************************x = _t0
looking for fibonacci::fib::_t0
x = _t0
ar info
fibonacci::fib::n`2 fibonacci::fib::x`2 
not f
No such variable exist
%rax in genMove
looking for fibonacci::fib::_t1
##################Line is : 11	:stackpointer=stackpointer-8
cnt = 8
line: 12	:x`2=_t1
x`2=_t1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != x`2 x`2=_t1
looking for fibonacci::fib::_t1
looking for fibonacci::fib::x`2
identify called
movq	-32(%rbp), %rbx
movq	%rbx, -16(%rbp)
ret
size is 24
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
jmp .L15
.L7:
movq	-8(%rbp), %rbx
movq	$1, %rcx
subq	%rbx, %rcx
movq	%rcx, -24(%rbp)
movq  -24(%rbp), %rsi
call fibonacci-fib
movq	%rax, -32(%rbp)
movq	-32(%rbp), %rbx
movq	%rbx, -16(%rbp)
funccode size: 26
cnt = 9
line: 13	:_t2=x`2+n`2
_t2=x`2+n`2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != _t2 _t2=x`2+n`2
y, z = x`2, n`2
x`2 in genMove
looking for fibonacci::fib::x`2
y = x`2
n`2 in genMove
looking for fibonacci::fib::n`2
%rcx in genMove
looking for fibonacci::fib::_t2
identify called
movq	-16(%rbp), %rbx
movq	-8(%rbp), %rcx
addq	%rbx, %rcx
movq	%rcx, -40(%rbp)
ret
size is 26
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
jmp .L15
.L7:
movq	-8(%rbp), %rbx
movq	$1, %rcx
subq	%rbx, %rcx
movq	%rcx, -24(%rbp)
movq  -24(%rbp), %rsi
call fibonacci-fib
movq	%rax, -32(%rbp)
movq	-32(%rbp), %rbx
movq	%rbx, -16(%rbp)
movq	-16(%rbp), %rbx
movq	-8(%rbp), %rcx
addq	%rbx, %rcx
movq	%rcx, -40(%rbp)
funccode size: 30
cnt = 10
line: 14	:x`2=_t2
x`2=_t2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != x`2 x`2=_t2
looking for fibonacci::fib::_t2
looking for fibonacci::fib::x`2
identify called
movq	-40(%rbp), %rbx
movq	%rbx, -16(%rbp)
ret
size is 30
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
jmp .L15
.L7:
movq	-8(%rbp), %rbx
movq	$1, %rcx
subq	%rbx, %rcx
movq	%rcx, -24(%rbp)
movq  -24(%rbp), %rsi
call fibonacci-fib
movq	%rax, -32(%rbp)
movq	-32(%rbp), %rbx
movq	%rbx, -16(%rbp)
movq	-16(%rbp), %rbx
movq	-8(%rbp), %rcx
addq	%rbx, %rcx
movq	%rcx, -40(%rbp)
movq	-40(%rbp), %rbx
movq	%rbx, -16(%rbp)
funccode size: 32
cnt = 11
line: 15	:return x`2
return x`2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
x`2 in genMove
looking for fibonacci::fib::x`2
identify called
.L15:
movq	-16(%rbp), %rax
ret
size is 32
done
printing funccode
fibonacci_fib:
pushq %rbp
movq %rsp, %rbp
subq $56, %rsp
movq	%rdi, -48(%rbp)
movq %rsi, -8(%rbp)
movq	$0, -16(%rbp)
movq	-8(%rbp), %rax
movq	$1, %rcx
.L3:
cmpq	%rcx, %rax
jle .L5
jmp .L7
.L5:
movq	$1, -16(%rbp)
jmp .L15
.L7:
movq	-8(%rbp), %rbx
movq	$1, %rcx
subq	%rbx, %rcx
movq	%rcx, -24(%rbp)
movq  -24(%rbp), %rsi
call fibonacci-fib
movq	%rax, -32(%rbp)
movq	-32(%rbp), %rbx
movq	%rbx, -16(%rbp)
movq	-16(%rbp), %rbx
movq	-8(%rbp), %rcx
addq	%rbx, %rcx
movq	%rcx, -40(%rbp)
movq	-40(%rbp), %rbx
movq	%rbx, -16(%rbp)
.L15:
movq	-16(%rbp), %rax
funccode size: 34
cnt = 12
line: 16	:endfunc 
endfunc 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
it = main
fibonacci-main.3ac
line: beginfunc main 
x = main
fibonacci-main
the line is fibonacci,1
Name = fibonacci::main::n`8as
Name = fibonacci::main::x`8as
fill var returned
pos = 15
Declaring local vars******************************************
read csv 3
i = 1
i = 1
 t = int!
sz = -16
t=fibonacci::main::n`8
dec
i = 2
i = 2
 t = int!
sz = -24
t=fibonacci::main::x`8
dec
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1tmp size = 4
insert arg calleds
reavched th
looking for fibonacci::main::this
insert ags ret
file opened!
cnt = 1
line: 18	:n`8=1
n`8=1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != n`8 n`8=1
getting address for n`8 as looking for fibonacci::main::n`8
-8
looking for fibonacci::main::n`8
identify called
movq	$1, -8(%rbp)
ret
size is 5
done
printing funccode
main:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq	%rdi, -56(%rbp)
movq	$1, -8(%rbp)
funccode size: 6
cnt = 2
line: 19	:pushparam n`8
##################Line is : 20	:stackpointer=stackpointer+8
##################Line is : 21	:_t0=call fib
##################Line is : 21	:_t0=call fib
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2num of arguments = 1
************************************************x = n`8
looking for fibonacci::main::n`8
x = n`8
ar info
fibonacci::main::n`8 fibonacci::main::x`8 
come
ar info
fibonacci::main::n`8 fibonacci::main::x`8 
come
%rax in genMove
looking for fibonacci::main::_t0
##################Line is : 22	:stackpointer=stackpointer-8
cnt = 3
line: 23	:x`8=_t0
x`8=_t0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
hey here
x != x`8 x`8=_t0
looking for fibonacci::main::_t0
looking for fibonacci::main::x`8
identify called
movq	-24(%rbp), %rbx
movq	%rbx, -16(%rbp)
ret
size is 9
done
printing funccode
main:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq	%rdi, -56(%rbp)
movq	$1, -8(%rbp)
movq  -8(%rbp), %rsi
call fibonacci-fib
movq	%rax, -24(%rbp)
movq	-24(%rbp), %rbx
movq	%rbx, -16(%rbp)
funccode size: 11
cnt = 4
line: 24	:print x`8
print x`8
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
hey there
hey
x`8 heree var name
looking for fibonacci::main::x`8
identify called
movq	$0, %rax
movq	$printfmt, %rdi
movq	-16(%rbp), %rsi
call printf
ret
size is 11
done
printing funccode
main:
pushq %rbp
movq %rsp, %rbp
subq $64, %rsp
movq	%rdi, -56(%rbp)
movq	$1, -8(%rbp)
movq  -8(%rbp), %rsi
call fibonacci-fib
movq	%rax, -24(%rbp)
movq	-24(%rbp), %rbx
movq	%rbx, -16(%rbp)
movq	$0, %rax
movq	$printfmt, %rdi
movq	-16(%rbp), %rsi
call printf
funccode size: 15
cnt = 5
line: 25	:endfunc 
endfunc 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
